{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLACMA,EACC,mCADDA,EAEE,2CAiEOC,MA/Df,WACE,MAAyBC,mBAAS,IAAG,mBAA9BC,EAAK,KAAEC,EAAQ,KACtB,EAA6BF,mBAAS,CAAC,GAAE,mBAAlCG,EAAO,KAAEC,EAAU,KA6B1B,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAM,GAAM,WACvD,MAAM,SACjB,iCACE,qBAAKF,UAAU,aAAY,SACzB,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,MAAM,EACvCA,MAAOZ,EACPa,WAvCK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAQ,qBAAaG,EAAK,+BAAuBH,IACvDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,EACd,GAEN,MAgC8B,oBAAflB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAc,UAC3B,sBAAKA,UAAU,WAAU,UAAEF,EAAQqB,KAAI,IAAGrB,EAAQsB,IAAIC,WACtD,qBAAKrB,UAAU,OAAM,SAlCX,SAACsB,GACnB,IAKIC,EAHO,CAAC,SAAS,UAAU,YAAY,WAAW,SACtD,WAAW,UAEID,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAPS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAChE,SAAS,YAAY,UAAU,WAAW,YAMvBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAG,YAAIE,EAAI,YAAIE,EAAK,YAAIE,EACpC,CAsBiCE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAa,UAC1B,sBAAKA,UAAU,OAAM,UAAEiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAAK,WACpD,qBAAKF,UAAU,UAAS,SAAEF,EAAQA,QAAQ,GAAGG,aAG7C,OAIZ,ECtDekC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1BZ,G","file":"static/js/main.2df6fde0.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nconst api = {\r\n  key: \"63df7f790d71fa60f319248bcc68032d\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\nfunction App() {\r\n  const [query, setQuery] =useState('');\r\n  const [weather, setWeather] =useState({});\r\n\r\n  const search = evt=>{\r\n    if(evt.key === 'Enter'){\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then(res => res.json())\r\n        .then(result =>{\r\n          setWeather(result);\r\n          setQuery('');\r\n          console.log(result);\r\n        });\r\n    }\r\n  }\r\n\r\n  const dateBuilder = (d) =>{\r\n    let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\r\n    \"August\",\"September\",\"October\",\"November\",\"December\"]\r\n    let days = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\r\n    \"Saturday\",\"Sunday\"]\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={\r\n      (typeof weather.main != \"undefined\") ? ((weather.main.temp >16) ? 'app warm' \r\n      : 'app') : 'app'}>\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search...\"\r\n            onChange={e => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n            />\r\n        </div>\r\n        {(typeof weather.main !=\"undefined\") ? (\r\n        <div>\r\n          <div className=\"location-box\">\r\n            <div className=\"location\">{weather.name},{weather.sys.country}</div>\r\n            <div className=\"date\">{dateBuilder(new Date())}</div>\r\n          </div>\r\n          <div className=\"weather-box\">\r\n            <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\r\n            <div className=\"weather\">{weather.weather[0].main}</div>\r\n          </div>\r\n        </div>\r\n        ): ('')}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}