{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLACMA,EACC,mCADDA,EAEE,2CAiEOC,MA/Df,WACE,MAAyBC,mBAAS,IAAG,mBAA9BC,EAAK,KAAEC,EAAQ,KACtB,EAA6BF,mBAAS,CAAC,GAAE,mBAAlCG,EAAO,KAAEC,EAAU,KA6B1B,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAM,GAAM,WACvD,MAAM,SACjB,iCACE,qBAAKF,UAAU,aAAY,SACzB,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,MAAM,EACvCA,MAAOZ,EACPa,WAvCK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAQ,qBAAaG,EAAK,+BAAuBH,IACvDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,EACd,GAEN,MAgC8B,oBAAflB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAc,UAC3B,sBAAKA,UAAU,WAAU,UAAEF,EAAQqB,KAAI,IAAGrB,EAAQsB,IAAIC,WACtD,qBAAKrB,UAAU,OAAM,SAlCX,SAACsB,GACnB,IAKIC,EAHO,CAAC,SAAS,UAAU,YAAY,WAAW,SACtD,WAAW,UAEID,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAPS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAChE,SAAS,YAAY,UAAU,WAAW,YAMvBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAG,YAAIE,EAAI,YAAIE,EAAK,YAAIE,EACpC,CAsBiCE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAa,UAC1B,sBAAKA,UAAU,OAAM,UAAEiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAAK,WACpD,qBAAKF,UAAU,UAAS,SAAEF,EAAQA,QAAQ,GAAGG,aAG7C,OAIZ,ECtDekC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1BZ,G","file":"static/js/main.e81ab188.chunk.js","sourcesContent":["import React,{useState} from 'react';\nconst api = {\n  key: \"63df7f790d71fa60f319248bcc68032d\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nfunction App() {\n  const [query, setQuery] =useState('');\n  const [weather, setWeather] =useState({});\n\n  const search = evt=>{\n    if(evt.key === 'Enter'){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result =>{\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) =>{\n    let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"]\n    let days = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\n    \"Saturday\",\"Sunday\"]\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n\n  return (\n    <div className={\n      (typeof weather.main != \"undefined\") ? ((weather.main.temp >16) ? 'app warm' \n      : 'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n        </div>\n        {(typeof weather.main !=\"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name},{weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ): ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}